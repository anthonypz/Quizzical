{"version":3,"sources":["components/WelcomeScreen.js","components/QuizScreen.js","App.js","index.js"],"names":["WelcomeScreen","props","className","onClick","handleClick","QuizScreen","data","isDone","handleDone","handleReplay","handleButton","score","loaded","questions","map","dangerouslySetInnerHTML","__html","question","choices","i","style","backgroundColor","isChosen","e","id","name","choice","feedback","styles","isCorrect","opacity","App","React","useState","setQuestions","start","setStart","setLoaded","setIsDone","replay","setReplay","setScore","useEffect","fetch","then","response","json","results","nanoid","incorrect_answers","correct_answer","sort","a","b","Math","random","length","j","prevScore","calculateScore","prevReplay","event","target","prevQuestions","item","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.936a2127.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function WelcomeScreen(props) {\n  return (\n    <div className=\"welcome-screen\">\n      <h1 className=\"title\">Quizzical</h1>\n      <p className=\"description\">\n        A short game with randomly generated questions.\n      </p>\n      <button className=\"start-btn\" onClick={props.handleClick}>\n        Start quiz\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function QuizScreen({\n  data,\n  isDone,\n  handleDone,\n  handleReplay,\n  handleButton,\n  score,\n  loaded,\n}) {\n  const questions = data.map((data) => (\n    <div key={data.id} className=\"quiz-question-group\">\n      <p\n        className=\"quiz-question\"\n        dangerouslySetInnerHTML={{ __html: data.question }}\n      />\n      {data.choices.map((i) => {\n        return (\n          <button\n            className=\"quiz-choices\"\n            key={i.id}\n            style={{\n              backgroundColor: i.isChosen ? \"#D6DBF5\" : \"#f5f7fb\",\n            }}\n            onClick={(e) => handleButton(e, i.id)}\n            name={data.id}\n            dangerouslySetInnerHTML={{ __html: i.choice }}\n          />\n        );\n      })}\n    </div>\n  ));\n\n  const feedback = data.map((data) => (\n    <div key={data.id} className=\"quiz-question-group\">\n      <p\n        className=\"quiz-question\"\n        dangerouslySetInnerHTML={{ __html: data.question }}\n      />\n      {data.choices.map((i) => {\n        const styles = {\n          backgroundColor: i.isCorrect\n            ? \"#94D7A2\"\n            : i.isChosen !== i.isCorrect\n            ? \"#F8BCBC\"\n            : \"#f5f7fb\",\n          opacity: i.isCorrect ? 1.0 : 0.5,\n        };\n        return (\n          <button\n            className=\"quiz-choices\"\n            key={i.id}\n            style={styles}\n            onClick={(e) => handleButton(e, i.id)}\n            name={data.id}\n            dangerouslySetInnerHTML={{ __html: i.choice }}\n          />\n        );\n      })}\n    </div>\n  ));\n\n  return (\n    <div className=\"quiz-screen\">\n      {!isDone && loaded ? (\n        <>\n          {questions}\n          <button className=\"quiz-btn\" onClick={handleDone}>\n            Check answers\n          </button>\n        </>\n      ) : (\n        <>\n          {feedback}\n          <p className=\"final-score\">You scored {score}/5 answers correctly</p>\n          <button className=\"quiz-btn\" onClick={handleReplay}>\n            Play again\n          </button>\n        </>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { nanoid } from \"nanoid\";\nimport WelcomeScreen from \"./components/WelcomeScreen\";\nimport QuizScreen from \"./components/QuizScreen\";\n\nexport default function App() {\n  const [questions, setQuestions] = React.useState();\n  const [start, setStart] = React.useState(false);\n  const [loaded, setLoaded] = React.useState(false);\n  const [isDone, setIsDone] = React.useState(false);\n  const [replay, setReplay] = React.useState(false);\n  const [score, setScore] = React.useState(0);\n\n  //Grab data from the API and organize it into state\n  React.useEffect(() => {\n    fetch(\"https://opentdb.com/api.php?amount=5&category=9\")\n      .then((response) => response.json())\n      .then((data) => {\n        setQuestions(\n          data.results\n            .map((question) => {\n              return {\n                id: nanoid(),\n                question: question.question,\n                choices: [\n                  ...question.incorrect_answers.map((choice) => ({\n                    choice: choice,\n                    id: nanoid(),\n                    isChosen: false,\n                    isCorrect: false,\n                  })),\n                  {\n                    choice: question.correct_answer,\n                    id: nanoid(),\n                    isChosen: false,\n                    isCorrect: true,\n                  },\n                ],\n              };\n            })\n            .sort((a, b) => 0.5 - Math.random())\n        );\n        setLoaded(true);\n      });\n  }, [replay]);\n\n  function handleStart() {\n    setStart(true);\n  }\n\n  //Change state so that the clicked button becomes selected by flipping the isChosen boolean value\n  function handleButton(event, id) {\n    const { name } = event.target;\n    setQuestions((prevQuestions) => {\n      return prevQuestions.map((question) => {\n        if (question.id === name) {\n          return {\n            ...question,\n            choices: question.choices.map((item) => {\n              if (item.id === id) {\n                return {\n                  ...item,\n                  isChosen: !item.isChosen,\n                };\n              } else {\n                return {\n                  ...item,\n                  isChosen: false,\n                };\n              }\n            }),\n          };\n        } else {\n          return question;\n        }\n      });\n    });\n  }\n\n  function calculateScore() {\n    for (let i = 0; i < questions.length; i++) {\n      for (let j = 0; j < questions[i].choices.length; j++) {\n        if (\n          questions[i].choices[j].isChosen &&\n          questions[i].choices[j].isCorrect\n        ) {\n          setScore((prevScore) => prevScore + 1);\n        }\n      }\n    }\n  }\n\n  function handleDone() {\n    calculateScore();\n    setIsDone(true);\n  }\n\n  function handleReplay() {\n    setIsDone(false);\n    setLoaded(false);\n    setScore(0);\n    setReplay((prevReplay) => !prevReplay);\n  }\n\n  return (\n    <>\n      {start ? (\n        <QuizScreen\n          data={questions}\n          isDone={isDone}\n          handleDone={handleDone}\n          handleReplay={handleReplay}\n          handleButton={handleButton}\n          score={score}\n          loaded={loaded}\n        />\n      ) : (\n        <WelcomeScreen handleClick={handleStart} />\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}