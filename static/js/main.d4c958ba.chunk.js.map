{"version":3,"sources":["components/WelcomeScreen.js","components/QuizScreen.js","App.js","index.js"],"names":["WelcomeScreen","props","className","onClick","handleClick","QuizScreen","data","isDone","handleDone","handleButton","score","questions","map","dangerouslySetInnerHTML","__html","question","choices","i","style","backgroundColor","isChosen","e","id","name","choice","App","React","useState","setQuestions","start","setStart","loaded","setLoaded","setIsDone","replay","setReplay","useEffect","fetch","then","response","json","results","nanoid","incorrect_answers","isCorrect","correct_answer","sort","a","b","Math","random","event","target","prevQuestions","item","length","j","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d4c958ba.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function WelcomeScreen(props) {\n  return (\n    <div className=\"welcome-screen\">\n      <h1 className=\"title\">Quizzical</h1>\n      <p className=\"description\">\n        A short game with randomly generated questions.\n      </p>\n      <button className=\"start-btn\" onClick={props.handleClick}>\n        Start quiz\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function QuizScreen({\n  data,\n  isDone,\n  handleDone,\n  handleButton,\n  score,\n}) {\n  const questions = data.map((data) => (\n    <div key={data.id} className=\"quiz-question-group\">\n      <p\n        className=\"quiz-question\"\n        dangerouslySetInnerHTML={{ __html: data.question }}\n      />\n      {data.choices.map((i) => {\n        return (\n          <button\n            className=\"quiz-choices\"\n            key={i.id}\n            style={{\n              backgroundColor: i.isChosen ? \"#D6DBF5\" : \"#f5f7fb\",\n            }}\n            onClick={(e) => handleButton(e, i.id)}\n            name={data.id}\n            dangerouslySetInnerHTML={{ __html: i.choice }}\n          />\n        );\n      })}\n    </div>\n  ));\n  return (\n    <div className=\"quiz-screen\">\n      {questions}\n      {isDone && <p>{`You scored ${score}/5 correct answers`}</p>}\n      <button className=\"quiz-btn\" onClick={handleDone}>\n        {!isDone ? \"Check answers\" : \"Play again\"}\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { nanoid } from \"nanoid\";\nimport WelcomeScreen from \"./components/WelcomeScreen\";\nimport QuizScreen from \"./components/QuizScreen\";\n\nexport default function App() {\n  const [questions, setQuestions] = React.useState();\n  const [start, setStart] = React.useState(false);\n  const [loaded, setLoaded] = React.useState(false);\n  const [isDone, setIsDone] = React.useState(false);\n  const [replay, setReplay] = React.useState(false);\n\n  //Grab data from the API and organize it into state\n  React.useEffect(() => {\n    fetch(\"https://opentdb.com/api.php?amount=5&category=9\")\n      .then((response) => response.json())\n      .then((data) => {\n        setQuestions(\n          data.results\n            .map((question) => {\n              return {\n                id: nanoid(),\n                question: question.question,\n                choices: [\n                  ...question.incorrect_answers.map((choice) => ({\n                    choice: choice,\n                    id: nanoid(),\n                    isChosen: false,\n                    isCorrect: false,\n                  })),\n                  {\n                    choice: question.correct_answer,\n                    id: nanoid(),\n                    isChosen: false,\n                    isCorrect: true,\n                  },\n                ],\n              };\n            })\n            .sort((a, b) => 0.5 - Math.random())\n        );\n        setLoaded(true);\n      });\n  }, [replay]);\n\n  function handleStart() {\n    setStart(true);\n  }\n\n  //Change state so that the clicked button becomes selected by flipping the isChosen boolean value\n  function handleButton(event, id) {\n    const { name } = event.target;\n    setQuestions((prevQuestions) => {\n      return prevQuestions.map((question) => {\n        if (question.id === name) {\n          return {\n            ...question,\n            choices: question.choices.map((item) => {\n              if (item.id === id) {\n                return {\n                  ...item,\n                  isChosen: !item.isChosen,\n                };\n              } else {\n                return {\n                  ...item,\n                  isChosen: false,\n                };\n              }\n            }),\n          };\n        } else {\n          return question;\n        }\n      });\n    });\n  }\n\n  function calcScore() {\n    let score = 0;\n    for (let i = 0; i < questions.length; i++) {\n      for (let j = 0; j < questions.choices.length; j++) {\n        if (\n          questions[i].choices[j].isChosen &&\n          questions[i].choices[j].isCorrect\n        ) {\n          score++;\n        }\n      }\n    }\n    return score;\n  }\n\n  function handleDone() {\n    if (isDone) {\n      setReplay(true);\n    }\n    setIsDone(true);\n  }\n\n  return (\n    <>\n      {start && loaded ? (\n        <QuizScreen\n          data={questions}\n          isDone={isDone}\n          handleDone={handleDone}\n          handleButton={handleButton}\n          score={calcScore}\n        />\n      ) : (\n        <WelcomeScreen handleClick={handleStart} />\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}